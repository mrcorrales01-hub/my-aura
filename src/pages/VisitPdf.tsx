import React, { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Download, FileText } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface VisitPrep {
  concerns: string;
  top_questions: string[];
  sbar: any; // Allow flexible JSON structure
}

const VisitPdf = () => {
  const { t } = useTranslation(['visit', 'common']);
  const navigate = useNavigate();
  const { toast } = useToast();
  const [visitPrep, setVisitPrep] = useState<VisitPrep | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadVisitPrep();
  }, []);

  const loadVisitPrep = async () => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) return;

      const { data, error } = await supabase
        .from('visit_preps')
        .select('concerns, top_questions, sbar')
        .eq('user_id', session.user.id)
        .order('created_at', { ascending: false })
        .limit(1)
        .maybeSingle();

      if (error) throw error;
      setVisitPrep(data);
    } catch (error) {
      console.error('Error loading visit prep:', error);
      toast({
        title: t('common:error'),
        description: 'Failed to load visit preparation',
        variant: 'destructive'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const exportPdf = () => {
    // Create a simple HTML structure for PDF export
    const printWindow = window.open('', '', 'width=800,height=600');
    if (!printWindow) return;

    const currentDate = new Date().toLocaleDateString();
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>My Aura - Visit Preparation</title>
        <style>
          body { font-family: Arial, sans-serif; max-width: 800px; margin: 20px auto; padding: 20px; }
          .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 10px; margin-bottom: 20px; }
          .section { margin-bottom: 20px; }
          .section h2 { color: #333; border-bottom: 1px solid #ccc; padding-bottom: 5px; }
          .questions { list-style: none; padding: 0; }
          .questions li { margin: 8px 0; padding: 8px; background: #f5f5f5; border-radius: 4px; }
          .footer { margin-top: 40px; text-align: center; font-size: 12px; color: #666; }
          .score { display: inline-block; margin: 0 20px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>My Aura - Visit Preparation</h1>
          <p>Date: ${currentDate}</p>
        </div>

        <div class="section">
          <h2>S - Situation</h2>
          <p>${visitPrep?.concerns || 'No concerns specified'}</p>
        </div>

        <div class="section">
          <h2>B - Background</h2>
          <p>Patient using digital wellness tracking with symptom monitoring and AI coaching support.</p>
        </div>

        <div class="section">
          <h2>A - Assessment</h2>
          <div>
            ${visitPrep?.sbar?.tests?.phq9 !== undefined ? `<span class="score">PHQ-9: ${visitPrep.sbar.tests.phq9}/27</span>` : ''}
            ${visitPrep?.sbar?.tests?.gad7 !== undefined ? `<span class="score">GAD-7: ${visitPrep.sbar.tests.gad7}/21</span>` : ''}
          </div>
        </div>

        <div class="section">
          <h2>R - Recommendations: What I want to discuss today</h2>
          <ul class="questions">
            ${visitPrep?.top_questions?.map(q => `<li>• ${q}</li>`).join('') || '<li>No questions prepared</li>'}
          </ul>
        </div>

        <div class="footer">
          <p>Generated by My Aura - ${currentDate}</p>
        </div>
      </body>
      </html>
    `;

    printWindow.document.write(html);
    printWindow.document.close();
    
    // Wait for content to load then print
    setTimeout(() => {
      printWindow.print();
    }, 500);
  };

  if (isLoading) {
    return <div className="container max-w-2xl mx-auto py-6">Loading...</div>;
  }

  if (!visitPrep) {
    return (
      <div className="container max-w-2xl mx-auto py-6">
        <Card>
          <CardContent className="text-center py-8">
            <FileText className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
            <p>No visit preparation found. Please prepare your visit first.</p>
            <Button onClick={() => navigate('/visit/prepare')} className="mt-4">
              Prepare Visit
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container max-w-2xl mx-auto py-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" onClick={() => navigate('/visit')}>
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h1 className="text-2xl font-bold">{t('visit:previewPdf')}</h1>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>SBAR - Visit Summary</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <h3 className="font-semibold">Situation</h3>
            <p className="text-sm">{visitPrep.concerns}</p>
          </div>

          <div>
            <h3 className="font-semibold">Background</h3>
            <p className="text-sm">Patient using digital wellness tracking with symptom monitoring and AI coaching support.</p>
          </div>

          <div>
            <h3 className="font-semibold">Assessment</h3>
            <div className="flex gap-4 text-sm">
              {visitPrep.sbar?.tests?.phq9 !== undefined && (
                <span>PHQ-9: {visitPrep.sbar.tests.phq9}/27</span>
              )}
              {visitPrep.sbar?.tests?.gad7 !== undefined && (
                <span>GAD-7: {visitPrep.sbar.tests.gad7}/21</span>
              )}
            </div>
          </div>

          <div>
            <h3 className="font-semibold">Recommendations: What I want to discuss</h3>
            <ul className="space-y-1 text-sm">
              {visitPrep.top_questions?.map((question, index) => (
                <li key={index}>• {question}</li>
              ))}
            </ul>
          </div>

          <Button onClick={exportPdf} className="w-full mt-6">
            <Download className="h-4 w-4 mr-2" />
            {t('visit:exportPdf')}
          </Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default VisitPdf;