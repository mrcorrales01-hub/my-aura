import jsPDF from 'jspdf';
import dayjs from 'dayjs';

interface PDFData {
  lang: string;
  sbar: { S: string; B: string; A: string; R: string };
  questions: string[];
  logs: Array<{ intensity: number; createdAt: string }>;
  phq9?: number;
  gad7?: number;
}

export function exportVisitPdf({
  lang,
  sbar,
  questions,
  logs,
  phq9,
  gad7
}: PDFData): void {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const margin = 20;
  const contentWidth = pageWidth - 2 * margin;
  
  let yPos = 30;
  
  // Header
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text('My Aura - Visit Preparation', margin, yPos);
  
  yPos += 10;
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Date: ${dayjs().format('YYYY-MM-DD')}`, margin, yPos);
  
  // Helper function to add wrapped text
  const addSection = (title: string, content: string, addSpacing = true) => {
    if (addSpacing) yPos += 15;
    
    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(12);
    pdf.text(title, margin, yPos);
    
    yPos += 8;
    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(9);
    
    const lines = pdf.splitTextToSize(content, contentWidth);
    lines.forEach((line: string) => {
      if (yPos > 270) { // Near bottom of page
        pdf.addPage();
        yPos = 30;
      }
      pdf.text(line, margin, yPos);
      yPos += 5;
    });
  };
  
  // SBAR Sections
  addSection('S - Situation', sbar.S);
  addSection('B - Background', sbar.B);
  
  // Assessment with scores
  let assessmentText = sbar.A;
  if (phq9 !== undefined || gad7 !== undefined) {
    const scores = [];
    if (phq9 !== undefined) scores.push(`PHQ-9: ${phq9}/27`);
    if (gad7 !== undefined) scores.push(`GAD-7: ${gad7}/21`);
    assessmentText += (assessmentText ? ' ' : '') + scores.join(', ');
  }
  addSection('A - Assessment', assessmentText);
  
  // Sparkline from logs (simple text representation)
  if (logs.length > 0) {
    yPos += 5;
    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(10);
    pdf.text('Symptom Intensity Trend (last 14 days):', margin, yPos);
    
    yPos += 8;
    
    // Draw simple sparkline using text
    const intensities = logs
      .slice(0, 14)
      .reverse()
      .map(log => log.intensity);
    
    if (intensities.length > 0) {
      const sparklineY = yPos;
      const sparklineWidth = contentWidth - 40;
      const sparklineHeight = 20;
      
      // Draw simple line chart
      pdf.setLineWidth(0.5);
      
      intensities.forEach((intensity, index) => {
        const x = margin + (index * sparklineWidth / (intensities.length - 1));
        const y = sparklineY + sparklineHeight - (intensity * sparklineHeight / 10);
        
        if (index === 0) {
          pdf.circle(x, y, 1, 'F');
        } else {
          const prevIntensity = intensities[index - 1];
          const prevX = margin + ((index - 1) * sparklineWidth / (intensities.length - 1));
          const prevY = sparklineY + sparklineHeight - (prevIntensity * sparklineHeight / 10);
          
          pdf.line(prevX, prevY, x, y);
          pdf.circle(x, y, 0.8, 'F');
        }
      });
      
      yPos += sparklineHeight + 10;
    }
  }
  
  // Recommendations/Questions
  let questionsText = sbar.R;
  if (questions.length > 0) {
    questionsText += '\n\nTop Questions to Discuss:\n';
    questionsText += questions
      .slice(0, 8)
      .map((q, i) => `${i + 1}. ${q}`)
      .join('\n');
  }
  addSection('R - Recommendations', questionsText);
  
  // Footer
  yPos = 280; // Bottom of page
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Generated by My Aura - ${dayjs().format('YYYY-MM-DD HH:mm')} - Language: ${lang.toUpperCase()}`, 
    margin, yPos, { align: 'left' });
  
  // Save PDF
  const filename = `My-Aura-Visit-${dayjs().format('YYYY-MM-DD')}.pdf`;
  pdf.save(filename);
}